# -*- coding: utf-8 -*-
"""gans02_collection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11q2HyBzZuM4QPAn4QEtN7_s1KDtaDArQ
"""

import cv2
import os
from os import listdir
import sys
import argparse
from posixpath import join
import shutil

import json
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import time
import instaloader
from datetime import datetime
from itertools import dropwhile, takewhile
import csv
import os

#Append the directory to your python path
prefix = 'C:/Users/leebr/Documents/GitHub/'
prefix = '/home/hume-users/leebri2n/Documents/'

# modify customized_path
customized_path = 'hume2022/eshaep_gans/'
proj_path = prefix + customized_path

print('Path to data: {}'.format(proj_path))

#TODO: Standardize input/output paths to make more sense.

destination = os.path.join(os.path.join(prefix, 'data'), 'input')

class InstagramScraper():
    """
        Class credit to: HKN MZ on medium.com
    """
    def __init__(self, login_user='', login_pass='', dest_path='', \
        date_start=(2022, 5, 1), date_end=(2022, 6, 1)):

        self.L = instaloader.Instaloader(dirname_pattern=dest_path,
            download_pictures=True,
            download_videos=False, #HARDCODED
            download_video_thumbnails=False,
            save_metadata=False,
            compress_json=False)

        self.post_errors = 0

        try:
            self.L.login(login_user, login_pass)
            print("Login successful.")
        except:
            print("Login unsuccessful.")

    #HASHTAG
    def download_hashtag_posts(self, hashtags=[], supercategory='misc', max_count=25):
        if len(hashtags) == 0:
          print("Specify at least one hashtag into the hashtags list. Supercategory optional.")
          return

        supcat_path = os.path.join(destination, supercategory)
        #os.makedirs(supcat_path, exist_ok=True)

        for tag in hashtags:
          iter = 0
          limit = max_count
          self.L.dirname_pattern = os.path.join(supcat_path, tag)
          print("Scraping for ", tag)

          #self.L.download_hashtag(tag, max_count=1000,profile_pic=False, posts=False)

          for post in instaloader.Hashtag.from_name(self.L.context, tag).get_posts_resumable():
              try:
                  self.L.download_post(post, target='#'+tag)
                  print("Saving image ", str(iter), " of ", str(limit))
              except : #leebri2n
                  self.post_errors += 1
                  print("Error encountered: ", sys.exc_info()[0])
                  continue

              if iter == limit:
                  break
              elif iter % 10 == 0:
                  print("Sleeping to prevent lockout... (45sec)")
                  time.sleep(45)

              iter += 1

        #Reset directory
        self.L.dirname_pattern = os.path.join(destination, '')
        print("Scraping job completed. Resetting directory...")

cls = InstagramScraper(login_user='gram.scrape', login_pass='insta$8scrape88', dest_path=destination)

landmark_tags = ['']
landscape_tags = ['beachsunset']
object_tags = ['lamborghini', 'newyorkpizza']
animal_tags = ['corgi', 'tabbycat']

print(cls.L.dirname_pattern)

start = time.time()
# ~~~~~~~~~~~~~~~~~~ ENTER SCRAPING SUBJECTS ~~~~~~~~~~~~~~~~~
cls.download_hashtag_posts(hashtags=object_tags, supercategory='objects', max_count=500)
cls.download_hashtag_posts(hashtags=animal_tags, supercategory='animals', max_count=500)
cls.download_hashtag_posts(hashtags=landscape_tags, supercategory='landscapes', max_count=500)
# ~~~~~~~~~~~~~~~~ END SCRAPING ~~~~~~~~~~~~~~~~~~~~~~~~~
end = time.time()
print("TOTAL EXECUTION TIME: ", str((end-start)/60), "MINUTES")
